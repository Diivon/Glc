Class:Layer:Declaration
	#ObjectsDeclarationInclude#	

	class #SceneName#;
	class #ClassName# : public ::gc::TypeAliases<#ClassName#>{
		#SceneName# & scene;
		#ObjectVariables#
		#ComponentsVariables#
		#ClassName# & self;
	public:
		#ClassName#(#SceneName# &);
		~#ClassName#();

		void onStart();
		void onUpdate(const float & dt);
		#ComponentsMethodsDeclaration#
	public:
		template<class F>
		void foreach(F &&);
		template<class T>
		T & getObject();
		template<class T>
		const T & getObject() const;
		#getObjects#
	private:
		#ClassName#(c_lref_t) = delete;
		#ClassName#(rref_t) = delete;
		void operator = (c_lref_t) = delete;
		void operator = (rref_t) = delete;
	};
	#RenderLayer#
Class:Layer:Implementation
	#include "#SceneName#.h"
	
	#ClassName#::#ClassName#(#SceneName# & sc) try:
		scene(sc), self(*this) 
		#AdditionalConstructorList#
		{
		#ConstructorBody#
	}
	catch(std::exception & e){
		std::cout << "#ClassName# throws: " << e.what() << std::endl;
		throw;
	}
	#ClassName#::~#ClassName#(){
	}
	void #ClassName#::onStart(){
		#OnStart#
	}
	void #ClassName#::onUpdate(const float & dt){
		#OnUpdate#
	}
	template<class F>
	#ComponentsMethodsImplementation#
	void #ClassName#::foreach(F && f){
		#Foreach#
	}