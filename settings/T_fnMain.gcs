File:Main:Def
	#Include#

	inline void processEvents(sf::RenderWindow & w){
	sf::Event event;
	while (w.pollEvent(event)) {
		if (event.type == sf::Event::Closed)
			w.close();
		if (event.type == sf::Event::KeyPressed) {
			if (event.key.code == sf::Keyboard::Escape)
				w.close();
			const_cast<gc::Event<gc::Keyboard::Key> &>(gc::Keyboard::onKeyPressed).emit(static_cast<gc::Keyboard::Key>(event.key.code));
		}
		if (event.type == sf::Event::MouseMoved)
			const_cast<gc::Event<gc::Vec2> &>(gc::Mouse::onMove).emit(gc::Vec2((float)event.mouseMove.x, (float)event.mouseMove.y));
		if (event.type == sf::Event::MouseButtonPressed)
			const_cast<gc::Event<gc::Mouse::Button> &>(gc::Mouse::onButtonPressed).emit(static_cast<gc::Mouse::Button>(event.mouseButton.button));
		}
	}
	inline void fillBackground(gc::Renderer & r){
		static gc::Sprite spr(R"(resources\Background.jpg)");
		auto camPos = r.getCamera().getCenter() - (r.getCamera().getSize() / 2);

		for(float x = (int)(camPos.x - spr.getSize().x) / (int)spr.getSize().x ; //precond
			x < camPos.x + r.getCamera().getSize().x + spr.getSize().x; //cond
			x += spr.getSize().x)					//postcond
		for(float y = (int)(camPos.y - spr.getSize().y) / (int)spr.getSize().y; //precond
			y < camPos.y + r.getCamera().getSize().y + spr.getSize().y; //cond
			y += spr.getSize().y){				//postcond
			r.render(spr, {x, y});
		}
	}
	const int c_framesPerSecond = 30;
	const float c_MillisecondsForOneFrame = 1'000 / c_framesPerSecond;

	const gc::Vec2 gc::Vec2::zero	{0, 0 };
	const gc::Vec2 gc::Vec2::right	{1, 0 };
	const gc::Vec2 gc::Vec2::left 	{-1, 0};
	const gc::Vec2 gc::Vec2::up   	{0, -1};
	const gc::Vec2 gc::Vec2::down 	{0, 1 };
	gc::priv::Debug gc::debug{ R"(resources\DebugFont.ttf)" };
	gc::priv::printer gc::print;
	gc::priv::printLiner gc::println;
	const gc::Event<gc::Vec2> gc::Mouse::onMove; 
	const gc::Event<gc::Mouse::Button> gc::Mouse::onButtonPressed;
	const gc::Event<gc::Keyboard::Key> gc::Keyboard::onKeyPressed;
	sf::RenderWindow mainWindow(sf::VideoMode(800,600), "sfml", sf::Style::Close);
	gc::Camera mainCamera(gc::Vec2(0, 0), gc::Vec2(800,600));
	sf::RenderWindow * gc::Mouse::_win = &mainWindow;
	gc::Camera * gc::Mouse::_cam = &mainCamera;

	int main() try{
		std::cout.setf(std::ios::boolalpha);
		gc::Renderer renderer;
		renderer.setWindow(mainWindow).setCamera(mainCamera);
		
		float dt = 0.5f;
		#FirstSceneClassName# currentScene;
		currentScene.setRenderer(renderer);
		currentScene.start();
		sf::Clock clock;
		while(mainWindow.isOpen()) try{
			clock.restart();

			processEvents(mainWindow);

			mainWindow.clear();
			fillBackground(renderer);

			currentScene.update(c_MillisecondsForOneFrame);
			renderer.renderScene(currentScene);

			auto debText = gc::debug.getSFText();
			debText.setPosition(mainCamera.getCenter() - (mainCamera.getSize() / 2));
			mainWindow.draw(debText);

			mainWindow.setView(mainCamera.getView());

			renderer.show();

			dt = clock.getElapsedTime().asMilliseconds();
			if (dt < c_MillisecondsForOneFrame) sf::sleep(sf::milliseconds(static_cast<sf::Int32>(c_MillisecondsForOneFrame - dt)));
		}
		catch(std::exception & e){
			gc::debug.log("exception was catched in main game loop, what is:", e.what());
		}
	}
	catch(std::exception & e){
		std::cout << "outer " << e.what();
	}
	catch(...){
		std::cout << "wtf";
	}