Class:RenderableObject:Declaration
	class #SceneName#;
	class #LayerName#;
	class #ClassName# : public ::gc::ClassTraits<#ClassName#>{
		friend class ::gc::Camera;
	public:	
		typedef #ClassName# this_t;
		#SceneName# & scene;
		#LayerName# & layer;
		::gc::Vec2 pos;
		#ComponentsVariables#
	//public:
		#ClassName#(#SceneName# &, #LayerName# &);
		~#ClassName#();
		void onStart();
		void onUpdate(const float & dt);
		const ::gc::Sprite & getSprite() const;
		::gc::Sprite & getSprite();
		#ComponentsMethods#
	private:
		#ClassName#(const #ClassName# &) = delete;
		#ClassName#(#ClassName# &&) = delete;
		void operator = (const #ClassName# &) = delete;
		void operator = (#ClassName# &&) = delete;
	};
Class:RenderableObject:Implementation
	#include "#SceneName#.h"
	#ClassName#::#ClassName#(#SceneName# & sc, #LayerName# & lr):
		pos(#Pos#), scene(sc), layer(lr)
		#AdditionalConstructorList#
		{
			#ConstructorBody#
		}
	#ClassName#::~#ClassName#(){
	}
	void #ClassName#::onStart(){
		#OnStart#
	}
	void #ClassName#::onUpdate(const float & dt){
		#OnUpdate#
	}
	const ::gc::Sprite & #ClassName#::getSprite() const{
		const_cast<::gc::Sprite &>(sprite).setPosition(pos);
		return sprite;
	}
	::gc::Sprite & #ClassName#::getSprite(){
		sprite.setPosition(pos);
		return sprite;
	}
	#ComponentsMethods#