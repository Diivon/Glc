variables:
	public: 
	private:
		gc::Vec2 _lookvec;
		const float _rotateGrade = 5.0f;
		const float _speed = 5.0f;
		bool _isFirstWeapon = true;
		i16 _hp;
		bool _isAlive = true;
		float current_effect_life_time = 0.0f;
methods:
	void onStart(){
		scene.getRenderer().getCamera().followSpeed = 0.2;
		scene.getRenderer().getCamera().moveTo({400, 300});
	}
	void onUpdate(const float & dt){
		if (self._hp <= 0){
			self.die();
			return;
		}

		if (gc::Mouse::isButtonPressed(gc::Mouse::Button::Left)){
			self.shoot(_lookvec);
		}
		_lookvec = (gc::Mouse::getWorldPosition() - self.getCenter()).normalize();
		auto deg = gc::toDegree(acos(-_lookvec.y));
		if (_lookvec.x < 0)	deg.value *= -1;
		self.getGraphicalComponent().setRotation(deg);
		
		scene.getRenderer().render(
			gc::Line()
				.setBegin(self.getCenter() + gc::Vec2{-50, -100})
				.setEnd(self.getCenter() + gc::Vec2{50, -100})
				.setColor(gc::Color::Red)
				.setThickness(9)
		);
		scene.getRenderer().render(
			gc::Line()
				.setBegin(self.getCenter() + gc::Vec2{-50, -98})
				.setEnd(self.getCenter() + gc::Vec2{-50.0f + _hp, -98})
				.setColor(gc::Color::Green)
				.setThickness(5)
		);

		//forward
		if (gc::Keyboard::isKeyPressed(gc::Keyboard::Key::W))
			self.tryMove(_lookvec * _speed);
		//backward
		if (gc::Keyboard::isKeyPressed(gc::Keyboard::Key::S))
			self.tryMove(_lookvec * -_speed);
		//right strafe
		if (gc::Keyboard::isKeyPressed(gc::Keyboard::Key::D))
			self.tryMove(_lookvec.getRotated(sh::degree(90.0f)) * _speed);
		//left strafe
		if (gc::Keyboard::isKeyPressed(gc::Keyboard::Key::A))
			self.tryMove(_lookvec.getRotated(sh::degree(-90.0f)) * _speed);

		if (gc::Keyboard::isKeyPressed(gc::Keyboard::Key::Num1)){
			self._isFirstWeapon = true;
		}
		if (gc::Keyboard::isKeyPressed(gc::Keyboard::Key::Num2)){
			self._isFirstWeapon = false;
		}
	}
	void shoot(gc::Vec2 const & dir){
		if (_isFirstWeapon){
			layer.getObject<Bullet>().start(self.getCenter() + (_lookvec * 50), dir);
			layer.getObject<Bullet>().speed = 100.0f;
			layer.getObject<Bullet>().lifeTime = 100.0f;
			layer.getObject<Bullet>().hitCount = 3;
		}
		else{
			layer.getObject<Bullet>().start(self.getCenter(), dir.getRotated(sh::degree(gc::Random<float>::get(-50, 50))));
			layer.getObject<Bullet>().speed = 250.0f;
			layer.getObject<Bullet>().lifeTime = 100.0f;
			layer.getObject<Bullet>().hitCount = 1;
		}
	}
	void tryMove(gc::Vec2 const & dir){
		auto newPos = self.getCenter() + dir;
		auto selfHalfSize = self.getSize() / 2;
		if (newPos.x - selfHalfSize.x < 0 ||
			newPos.x + selfHalfSize.x > 800 ||
			newPos.y - selfHalfSize.y < 0 ||
			newPos.y + selfHalfSize.y > 700
			) return;
		self.moveOn(dir);
	}
	void dealDamage(u16 dmg){
		_hp -= dmg;
	}
	void die(){
		self.isActive = false;
		self.isVisible = false;
		self._isAlive = false;
	}
	bool isAlive(){
		return self._isAlive;
	}
	//else methods here
constructors:
	//this code will be in class constructor-specific synthax example is:
	//str("awd"), dur(6)
	_lookvec(0, -1), _hp(100)
constructor_body:
	//this code will be runned when constructor of object will be called
	//use it for primary initialization only!!!
