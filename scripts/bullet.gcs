variables:
	public: 
		//your public variables here
		float speed;
		float lifeTime;
		u8 hitCount = 2;
	private:
		float _ttl;
		bool _alreadyFired;
		gc::Vec2 _dir;
		bool _isDied = false;
methods:
	void onStart(){
		//it's called once, before game cycle begins
		self.isVisible = false;
	}
	void die(){
		_alreadyFired = false;
		_ttl = 0.0f;
		_isDied = true;
		isVisible = false;
		isActive = false;
	}
	void wake(){
		isVisible = true;
		isActive = true;
		_isDied = false;
		_alreadyFired = false;
	}
	void onUpdate(const float & dt){
		if (_ttl > lifeTime){
			self.die();
			return;
		}
		_ttl += dt;
		self.moveOn(_dir * speed);
		calculateCollisions();
		scene.getRenderer().render(
			gc::Line()
				.setBegin(self.getCenter())
				.setEnd(self.getCenter() + (_dir * speed))
				.setColor(gc::Color::Yellow)
				.setThickness(5)
		);
	}
	void start(gc::Vec2 const & pos, gc::Vec2 const & dir){
		if(_alreadyFired) return;
		
		if (self._isDied)
			wake();
		self.moveTo(pos);
		_alreadyFired = true;
		_dir = dir;
		scene.getRenderer().render(
		gc::Line()
			.setBegin(self.getCenter() + (_dir * 10))
			.setEnd(self.getCenter() + (_dir * speed))
			.setColor(gc::Color::Yellow)
			.setThickness(5)
		);
	}
	void calculateCollisions(){
		scene.getLayer<EnemyLayer>().foreach([this](auto & i){
			if (hitCount == 0)	return;
			bool a = gc::areAtDifferentSides(
				self.getCenter(), 
				self.getCenter() + (_dir * speed),
				i.getCollider().getTopLeftCorner(),
				i.getCollider().getLowRightCorner()
			);
			bool b = gc::areAtDifferentSides(
				self.getCenter(), 
				self.getCenter() + (_dir * speed),
				i.getCollider().getTopRightCorner(),
				i.getCollider().getLowLeftCorner()
			);
			bool c = a || b;
			if (c && (i.getCenter() - self.getCenter()).getLength() < speed){
				i.dealDamage(40);
				--hitCount;
			}
		});
		if (hitCount == 0)	self.die();
	}
constructors:
	_ttl(0.0f), _alreadyFired(false), speed(5.0f), lifeTime(0.0f)
constructor_body:
